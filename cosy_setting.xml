<application>
  <component name="CosySettings">
    <option name="parameter">
      <ChangeUserSettingParams>
        <option name="allowReportUsage" value="true" />
        <option name="cloud">
          <CloudModelParam>
            <option name="autoTrigger">
              <CloudModelAutoTrigger>
                <option name="enable" value="true" />
                <option name="generateLength" value="level_1" />
                <option name="modelLevel" value="large" />
              </CloudModelAutoTrigger>
            </option>
            <option name="enable" value="true" />
            <option name="manualTrigger">
              <CloudModelManualTrigger>
                <option name="generateLength" value="level_2" />
                <option name="modelLevel" value="large" />
              </CloudModelManualTrigger>
            </option>
          </CloudModelParam>
        </option>
        <option name="local">
          <LocalModelParam>
            <option name="enable" value="false" />
            <option name="inferenceMode" value="auto" />
            <option name="maxCandidateNum" value="3" />
          </LocalModelParam>
        </option>
      </ChangeUserSettingParams>
    </option>
    <option name="recentQueries">
      <map>
        <entry key="HBFJAccountant_FWH|1162003950348091">
          <value>
            <list>
              <option value="用typescript，实现对axios二次包装，可应用于vue工程" />
            </list>
          </value>
        </entry>
        <entry key="btglxt-v1-frontend_web_customer|1162003950348091">
          <value>
            <list>
              <option value="`{&quot;swb_itemunid&quot;:&quot;&quot;,&quot;swb_itemcode&quot;:&quot;&quot;,&quot;swb_areacode&quot;:&quot;&quot;,&quot;swb_deptcode&quot;:&quot;&quot;,&quot;swb_srccode&quot;:&quot;&quot;,&quot;projid&quot;:&quot;checkOldApply接口返回的projid&quot;,&quot;certNo&quot;:&quot;证书号&quot;,&quot;name&quot;:&quot;姓名&quot;,&quot;sex&quot;:&quot;性别&quot;,&quot;education&quot;:&quot;教育水平&quot;,&quot;nation&quot;:&quot;民族&quot;,&quot;birth&quot;:&quot;生日（2021-01-01）&quot;,&quot;idCard&quot;:&quot;证件号&quot;,&quot;mobile&quot;:&quot;手机号&quot;,&quot;postalCode&quot;:&quot;邮政编码&quot;,&quot;addr_province&quot;:&quot;户籍所在地址——省名称&quot;,&quot;addr_city&quot;:&quot;户籍所在地址——市名称&quot;,&quot;addr_area&quot;:&quot;户籍所在地址——区域名称&quot;,&quot;addr_street&quot;:&quot;户籍所在地址——街道信息&quot;,&quot;addr_province_code&quot;:&quot;户籍所在地址——省编码&quot;,&quot;addr_city_code&quot;:&quot;户籍所在地址——市编码&quot;,&quot;addr_area_code&quot;:&quot;户籍所在地址——区编码&quot;,&quot;locAddr_province&quot;:&quot;现居住地地址——省名称&quot;,&quot;locAddr_city&quot;:&quot;现居住地地址——市名称&quot;,&quot;locAddr_area&quot;:&quot;现居住地地址——区域名称&quot;,&quot;locAddr_street&quot;:&quot;现居住地地址——街道信息&quot;,&quot;locAddr_province_code&quot;:&quot;现居住地地址——省编码&quot;,&quot;locAddr_city_code&quot;:&quot;现居住地地址——市编码&quot;,&quot;locAddr_area_code&quot;:&quot;现居住地地址——区编码&quot;,&quot;addrType&quot;:&quot;户籍性质&quot;,&quot;certType&quot;:&quot;证书类型&quot;,&quot;jobCode&quot;:&quot;工种编码&quot;,&quot;bankName&quot;:&quot;开户银行&quot;,&quot;bankAccount&quot;:&quot;银行卡号&quot;,&quot;manType&quot;:&quot;申报人员类型&quot;,&quot;manTypeFile&quot;:&quot;人员类型证明附件base64字符串&quot;,&quot;idCardType&quot;:&quot;证件类型&quot;,&quot;idCardFile&quot;:&quot;证件正面附件base64字符串&quot;,&quot;idCardFileBack&quot;:&quot;证件背面附件base64字符串&quot;,&quot;bankCardFile&quot;:&quot;社会保障卡或银行卡附件base64字符串&quot;,&quot;areaProFile&quot;:&quot;申报地区选择证明附件base64字符串&quot;,&quot;job&quot;:&quot;工种名称&quot;,&quot;level&quot;:&quot;证书等级&quot;,&quot;certDate&quot;:&quot;发证时间（2021-01-01）&quot;,&quot;checkOrg&quot;:&quot;鉴定机构&quot;,&quot;certOrg&quot;:&quot;发证机构&quot;}`&#10; 将上面字符串，用typescript语法，定义出完整的class" />
              <option value="{&quot;swb_itemunid&quot;:&quot;&quot;,&quot;swb_itemcode&quot;:&quot;&quot;,&quot;swb_areacode&quot;:&quot;&quot;,&quot;swb_deptcode&quot;:&quot;&quot;,&quot;swb_srccode&quot;:&quot;&quot;,&quot;projid&quot;:&quot;checkOldApply接口返回的projid&quot;,&quot;name&quot;:&quot;姓名&quot;,&quot;sex&quot;:&quot;性别&quot;,&quot;education&quot;:&quot;教育水平&quot;,&quot;nation&quot;:&quot;民族&quot;,&quot;birth&quot;:&quot;生日（2021-01-01）&quot;,&quot;idCard&quot;:&quot;证件号&quot;,&quot;mobile&quot;:&quot;手机号&quot;,&quot;postalCode&quot;:&quot;邮政编码&quot;,&quot;addr_province&quot;:&quot;户籍所在地址——省名称&quot;,&quot;addr_city&quot;:&quot;户籍所在地址——市名称&quot;,&quot;addr_area&quot;:&quot;户籍所在地址——区域名称&quot;,&quot;addr_street&quot;:&quot;户籍所在地址——街道信息&quot;,&quot;addr_province_code&quot;:&quot;户籍所在地址——省编码&quot;,&quot;addr_city_code&quot;:&quot;户籍所在地址——市编码&quot;,&quot;addr_area_code&quot;:&quot;户籍所在地址——区编码&quot;,&quot;locAddr_province&quot;:&quot;现居住地地址——省名称&quot;,&quot;locAddr_city&quot;:&quot;现居住地地址——市名称&quot;,&quot;locAddr_area&quot;:&quot;现居住地地址——区域名称&quot;,&quot;locAddr_street&quot;:&quot;现居住地地址——街道信息&quot;,&quot;locAddr_province_code&quot;:&quot;现居住地地址——省编码&quot;,&quot;locAddr_city_code&quot;:&quot;现居住地地址——市编码&quot;,&quot;locAddr_area_code&quot;:&quot;现居住地地址——区编码&quot;,&quot;addrType&quot;:&quot;户籍性质&quot;,&quot;certType&quot;:&quot;证书类型&quot;,&quot;jobCode&quot;:&quot;工种编码&quot;,&quot;bankName&quot;:&quot;开户银行&quot;,&quot;bankAccount&quot;:&quot;银行卡号&quot;,&quot;checkManType&quot;:&quot;申报人员类型&quot;,&quot;idCardType&quot;:&quot;证件类型&quot;,&quot;job&quot;:&quot;工种名称&quot;,&quot;level&quot;:&quot;证书等级&quot;,&quot;certDate&quot;:&quot;发证时间（2021-01-01）&quot;,&quot;checkOrg&quot;:&quot;鉴定机构&quot;,&quot;certOrg&quot;:&quot;发证机构&quot;,&quot;certNo&quot;:&quot;证书号&quot;,&quot;isOutside&quot;:1,&quot;certFileUrl&quot;:&quot;证书附件base64字符串&quot;,&quot;idCardFile&quot;:&quot;证件正面附件base64字符串&quot;,&quot;idCardFileBack&quot;:&quot;证件背面附件base64字符串&quot;,&quot;bankCardFile&quot;:&quot;社会保障卡或银行卡附件base64字符串&quot;,&quot;sxbxProImg&quot;:&quot;失业保险缴交证明附件base64字符串&quot;}" />
              <option value="{&quot;code&quot;:0,&quot;data&quot;:{&quot;fileManType&quot;:[&quot;城镇登记失业人员&quot;,&quot;脱贫人员&quot;,&quot;就业困难人员&quot;,&quot;城乡未继续升学的应届初高中毕业生&quot;,&quot;毕业学年高校毕业生&quot;,&quot;农村转移就业劳动者&quot;],&quot;manTypes&quot;:[&quot;企业职工&quot;,&quot;在岗农民工&quot;,&quot;农村转移就业劳动者&quot;,&quot;城乡未继续升学的应届初高中毕业生&quot;,&quot;下岗失业人员&quot;,&quot;城镇登记失业人员&quot;,&quot;退役军人&quot;,&quot;残疾人&quot;,&quot;毕业学年高校毕业生&quot;,&quot;脱贫人员&quot;,&quot;刑满释放人员&quot;,&quot;就业困难人员&quot;,&quot;台港澳同胞&quot;,&quot;防止返贫监测对象&quot;,&quot;灵活就业人员&quot;,&quot;其他&quot;],&quot;cardTypes&quot;:[&quot;中华人民共和国居民身份证&quot;,&quot;台湾同胞往来内地通行证&quot;],&quot;sexs&quot;:[&quot;男&quot;,&quot;女&quot;],&quot;addrTypes&quot;:[&quot;非农业户口(城镇)&quot;,&quot;本地非农业户口(本地城镇)&quot;,&quot;外地非农业户口(外地城镇)&quot;,&quot;农业户口(农村)&quot;,&quot;本地农业户口(本地农村)&quot;,&quot;外地农业户口(外地农村)&quot;,&quot;港澳台侨人员&quot;,&quot;香港特别行政区居民&quot;,&quot;澳门特别行政区居民&quot;,&quot;台湾地区居民&quot;,&quot;华侨&quot;,&quot;外国人&quot;,&quot;未取得永久居留权的外国人&quot;,&quot;取得永久居留权的外国人&quot;,&quot;居民户口(含农业户口、非农业户口)&quot;,&quot;本地居民户口&quot;,&quot;外地居民户口&quot;],&quot;educations&quot;:[&quot;小学&quot;,&quot;初中&quot;,&quot;普通高中&quot;,&quot;技工学校&quot;,&quot;职业高中&quot;,&quot;其他&quot;,&quot;中等专科&quot;,&quot;大学专科&quot;,&quot;硕士研究生&quot;,&quot;博士研究生&quot;,&quot;无要求&quot;],&quot;nations&quot;:[&quot;汉族&quot;,&quot;蒙古族&quot;,&quot;回族&quot;,&quot;藏族&quot;,&quot;维吾尔族&quot;,&quot;苗族&quot;,&quot;彝族&quot;,&quot;壮族&quot;,&quot;布依族&quot;,&quot;朝鲜族&quot;,&quot;满族&quot;,&quot;侗族&quot;,&quot;瑶族&quot;,&quot;白族&quot;,&quot;土家族&quot;,&quot;哈尼族&quot;,&quot;哈萨克族&quot;,&quot;傣族&quot;,&quot;黎族&quot;,&quot;傈僳族&quot;,&quot;佤族&quot;,&quot;畲族&quot;,&quot;高山族&quot;,&quot;拉祜族&quot;,&quot;水族&quot;,&quot;东乡族&quot;,&quot;纳西族&quot;,&quot;景颇族&quot;,&quot;柯尔克孜族&quot;,&quot;土族&quot;,&quot;达斡尔族&quot;,&quot;仫佬族&quot;,&quot;羌族&quot;,&quot;布朗族&quot;,&quot;撒拉族&quot;,&quot;毛南族&quot;,&quot;仡佬族&quot;,&quot;锡伯族&quot;,&quot;阿昌族&quot;,&quot;普米族&quot;,&quot;塔吉克族&quot;,&quot;怒族&quot;,&quot;乌孜别克族&quot;,&quot;俄罗斯族&quot;,&quot;鄂温克族&quot;,&quot;德昂族&quot;,&quot;保安族&quot;,&quot;裕固族&quot;,&quot;京族&quot;,&quot;塔塔尔族&quot;,&quot;独龙族&quot;,&quot;鄂伦春族&quot;,&quot;赫哲族&quot;,&quot;门巴族&quot;,&quot;珞巴族&quot;,&quot;基诺族&quot;,&quot;其他&quot;],&quot;areas&quot;:[{&quot;code&quot;:&quot;110101000000&quot;,&quot;name&quot;:&quot;东城区&quot;,&quot;pCode&quot;:&quot;110000000000&quot;},{&quot;code&quot;:&quot;000000000000&quot;,&quot;name&quot;:&quot;全国&quot;,&quot;pCode&quot;:&quot;&quot;}]}}" />
              <option value="[&#10;            {&#10;                &quot;code&quot;: &quot;110101000000&quot;,&#10;                &quot;name&quot;: &quot;东城区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110102000000&quot;,&#10;                &quot;name&quot;: &quot;西城区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110105000000&quot;,&#10;                &quot;name&quot;: &quot;朝阳区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110107000000&quot;,&#10;                &quot;name&quot;: &quot;石景山区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110106000000&quot;,&#10;                &quot;name&quot;: &quot;丰台区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110108000000&quot;,&#10;                &quot;name&quot;: &quot;海淀区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110109000000&quot;,&#10;                &quot;name&quot;: &quot;门头沟区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110111000000&quot;,&#10;                &quot;name&quot;: &quot;房山区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110112000000&quot;,&#10;                &quot;name&quot;: &quot;通州区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110113000000&quot;,&#10;                &quot;name&quot;: &quot;顺义区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110114000000&quot;,&#10;                &quot;name&quot;: &quot;昌平区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110115000000&quot;,&#10;                &quot;name&quot;: &quot;大兴区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            },&#10;            {&#10;                &quot;code&quot;: &quot;110117000000&quot;,&#10;                &quot;name&quot;: &quot;平谷区&quot;,&#10;                &quot;pCode&quot;: &quot;110000000000&quot;&#10;            }]" />
              <option value="以上JSON，用typescript，定义出数据对象" />
              <option value="pCode是父级节点的code，定义方法根据pCode获取子级code清单" />
              <option value="补充下代码注释" />
              <option value="vue 关闭变量名强制驼峰规则" />
            </list>
          </value>
        </entry>
        <entry key="btglxt_frontend_web_admin|1162003950348091">
          <value>
            <list>
              <option value="/generate optimization" />
              <option value="/generate comment" />
              <option value="/generate comment" />
              <option value="/generate comment" />
              <option value="/generate unit test" />
              <option value="编写一个彩票推演算法" />
              <option value="/explain code" />
              <option value="/generate comment" />
              <option value="对函数内的代码做补充注释" />
              <option value="/generate unit test" />
              <option value="通义灵码如何变更默认输出的代码语言，如默认改为TypeScripty" />
              <option value="/explain code" />
              <option value="分析此代码块，存在的性能、效率问题，并给出优化方案" />
              <option value="/explain code" />
              <option value="分析代码，存在的性能、效率问题，并给出优化方案" />
              <option value="/generate optimization" />
              <option value="对node_modules\@hbfe\security-toolkit\src做性能优化" />
              <option value="/explain code" />
              <option value="/generate optimization" />
              <option value="Property 'webfunnyEvent' does not exist on type 'Window &amp; typeof globalThis'." />
            </list>
          </value>
        </entry>
        <entry key="monitor_frontend_uniapp|1162003950348091">
          <value>
            <list>
              <option value="对于src目录下的代码做代码检查" />
            </list>
          </value>
        </entry>
        <entry key="superfrontenddevops_hua|1162003950348091">
          <value>
            <list>
              <option value="gm-crypto中的SM2如何使用，" />
              <option value="nodejs 如何实现sm2.encryptHex" />
              <option value="xTBKeyInfo 获取UTF_8格式" />
              <option value="**&#10;     * 使用SM2加密并返回Base64&#10;     *&#10;     * @param text      内容&#10;     * @param publicKey 公钥&#10;     * @return SM2加密并base64编码&#10;     */&#10;    public static String encryptBySm2AndBase64(String text, String publicKey) {&#10;        return encodeByBase64(encryptBySm2(text, publicKey));&#10;    }&#10;&#10;&#10;    /**&#10;     * 使用SM2加密&#10;     *&#10;     * @param text      内容&#10;     * @param publicKey 公钥&#10;     * @return 加密后内容&#10;     */&#10;    public static String encryptBySm2(String text, String publicKey) {&#10;        SM2 sm2 = SmUtil.sm2(null, publicKey);&#10;        return sm2.encryptHex(text, KeyType.PublicKey);&#10;    }" />
              <option value="将上面代码，用nodejs实现" />
              <option value="SM2.encrypt" />
              <option value="nodejs 获取 bytes" />
              <option value="Buffer.from" />
              <option value="nodejs 将字符串转Bytes" />
              <option value="将Buffer做Base64" />
              <option value="nodejs sm2 默认编码格式" />
              <option value="nodje pkcs1_oaep pkcs8" />
              <option value="cryptoJs.SHA256 用pkcs8" />
              <option value="Buffer.from UTF_8" />
              <option value="用nodejs实现JAVA sm2.encryptHex的方法" />
              <option value="public static String encryptBySm2AndBase64(String text, String publicKey) {&#10;        String str =  encodeByBase64(encryptBySm2(text, publicKey));&#10;        return str;&#10;    }&#10;&#10;&#10;    public static String encryptBySm2(String text, String publicKey) {&#10;        SM2 sm2 = SmUtil.sm2(null, publicKey);&#10;        String str =  sm2.encryptHex(text, KeyType.PublicKey);&#10;        return str;&#10;    }&#10;&#10;    public static String encodeByBase64(String text) {&#10;        final Base64.Encoder encoder = Base64.getEncoder();&#10;        return encoder.encodeToString(text.getBytes(StandardCharsets.UTF_8));&#10;    }" />
              <option value="将上述代码，用nodejs实现" />
              <option value="TypeError: gmCrypto.sm2DoEncrypt is not a function" />
              <option value="nodejs string 转utf-8 byte" />
              <option value="用JS实现生成32位的16进制随机码" />
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="showInlineAcceptTips" value="false" />
    <option name="showInlineCancelTips" value="false" />
    <option name="showInlineNextTips" value="false" />
    <option name="showInlinePrevTips" value="false" />
    <option name="showInlineTriggerTips" value="false" />
  </component>
</application>